/*
 * This build file was auto generated by 'gigawatt'
 * @author d7392
 * @date 30-08-2018 20.34
 */

// [plugins] this block must be the first
plugins {
	// to use the 'api' keyword in dependencies
	id 'java-library'
	// support for groovy
	id 'groovy'
	// autogenerate eclipse project files
	id 'eclipse'
	// create an html index linking every report generated
	id 'build-dashboard'
	// view of the project (jars used, navigable source tree)
	id 'project-report'
	// groovy code linter
	id 'codenarc'
	// test code coverage plugin
	id 'net.saliman.cobertura' version '2.5.4'
	// awesome git tag / gradle version integration
	id 'pl.allegro.tech.build.axion-release' version '1.9.2'
}

// [general] configuration
project.ext {
	groovyVersion       = '2.5.6'
	gradleVersion       = '5.2.1'
	spockVersion        = '1.2-groovy-2.5'
	codenarcVersion     = '1.2'
	slf4jVersion        = '1.7.25'

	wrapper.gradleVersion "$gradleVersion"
}

project.with {
	//project.name is set in the settings.gradle with rootProject.name
	group                 "it.grational.phontastit"
	version               scmVersion.version
	description           "A 'gigawatt' powered project."
}
// [crosscompile] source and target java version
allprojects {
	sourceCompatibility = '1.8'
	targetCompatibility = sourceCompatibility
}

repositories {
	jcenter()

	// leverage github as a maven repository
	maven { url 'https://jitpack.io' }
}

dependencies {
	// Groovy language support
	implementation "org.codehaus.groovy:groovy:$groovyVersion"

	// Slf4j dependencies
	implementation "org.slf4j:slf4j-api:$slf4jVersion"


	// We use the awesome Spock testing and specification framework
	testImplementation "org.spockframework:spock-core:$spockVersion"
}

// codenarc groovy source analyses
codenarc{
	toolVersion = "$codenarcVersion"

	codenarcMain {
		configFile = rootProject.file('conf/codenarc/ruleset.groovy')
		exclude "**/package-info.*"
		ignoreFailures true       // does not block builds
		maxPriority1Violations 0
		maxPriority2Violations 10
		maxPriority3Violations 20
	}
	codenarcTest {
		configFile = rootProject.file('conf/codenarc/ruleset-test.groovy')
		ignoreFailures true
		maxPriority1Violations 0
		maxPriority2Violations 10
		maxPriority3Violations 20
	}
}

// [tasks] configuration //
jar {
	// execute check task when create the jar
	dependsOn 'check'
}

check {
	// create the code coverage report
	dependsOn 'cobertura'
}

release {
	// test everything before a release
	dependsOn 'test'
}

// [tasks] definition
task listJars {
	description = 'print out the jars used by the project'
	doLast {
		configurations.compile.each { File file -> println file.name }
	}
}

tasks.withType(Test) {
	maxParallelForks = Runtime.runtime.availableProcessors() / 2
}
task uniTest(type: Test) {
	description = 'unit tests task'
	exclude '**/*ISpec*'
	exclude '**/*FSpec*'
}
task intTest(type: Test) {
	description = 'integration tests task'
	exclude '**/*USpec*'
	exclude '**/*FSpec*'
}
task funTest(type: Test) {
	description = 'functional tests task'
	exclude '**/*USpec*'
	exclude '**/*ISpec*'
}
gradle.startParameter.excludedTaskNames += "uniTest"
gradle.startParameter.excludedTaskNames += "intTest"
gradle.startParameter.excludedTaskNames += "funTest"
// vim: ft=groovy:fdm=indent
